# AI Image Reminders - Complete Package
# Comprehensive Home Assistant package using AI Tasks and native automations
# ADHD-focused image reminders for kitchen cleanliness, family room tidying, and dog walking
#
# Generated from modular components: 2025-08-25 19:48:19
# Source: Modular components in src/
#
# Features:
# - Kitchen cleanliness monitoring with AI image analysis
# - Family room tidiness detection and reminders
# - Dog walking reminders with automated driveway detection
# - Smart notification system with ADHD-friendly design
# - Configurable thresholds and notification cooldowns
#
# Requirements:
# - AI Tasks integration (ai_task.google_ai_task entity)
# - Camera entities for kitchen, family room, and driveway
# - Motion sensors for person/pet detection
# - Notification service configured as notify.parents
#
# Configuration:
# - Set camera entity IDs in input_text helpers
# - Adjust cleanliness thresholds via input_number sliders
# - Enable/disable monitoring via input_boolean toggles
#


# Template Sensors
template:
# Family Room Analysis Sensors
  - binary_sensor:
      name: "Family Room Needs Tidying"
      unique_id: family_room_needs_tidying
      state: >
        {{ states('sensor.family_room_analysis') == 'needs_tidying' }}
      device_class: problem
      icon: mdi:sofa
  
  - sensor:
      name: "Family Room Analysis"
      unique_id: family_room_analysis_sensor
      state: >
        {{ states('sensor.family_room_tidy_status') | default(states('input_text.family_room_analysis_result')) | default('unknown') }}
      attributes:
        specific_tasks: >
          {{ state_attr('sensor.family_room_tidy_status', 'tasks') | default(states('input_text.family_room_specific_tasks')) | default('Set up AI Tasks integration for automated analysis') }}
        last_updated: "{{ state_attr('sensor.family_room_tidy_status', 'timestamp') | default(states('input_datetime.family_room_last_check')) | default('never') }}"
        threshold: "{{ states('input_number.family_room_cleanliness_threshold') }}%"
  
# Kitchen Analysis Sensors
  - binary_sensor:
      name: "Kitchen Needs Cleaning"
      unique_id: kitchen_needs_cleaning
      state: >
        {{ states('sensor.kitchen_analysis') == 'needs_cleaning' }}
      device_class: problem
      icon: mdi:silverware-fork-knife
  
  - sensor:
      name: "Kitchen Analysis"
      unique_id: kitchen_analysis_sensor
      state: >
        {{ states('sensor.kitchen_clean_status') | default(states('input_text.kitchen_analysis_result')) | default('unknown') }}
      attributes:
        specific_tasks: >
          {{ state_attr('sensor.kitchen_clean_status', 'tasks') | default(states('input_text.kitchen_specific_tasks')) | default('Set up AI Tasks integration for automated analysis') }}
        last_updated: "{{ state_attr('sensor.kitchen_clean_status', 'timestamp') | default(states('input_datetime.kitchen_last_check')) | default('never') }}"
        threshold: "{{ states('input_number.kitchen_cleanliness_threshold') }}%"
  
# AI Detection Status and Driveway Sensors
  - sensor:
      name: "AI Detection Status"
      unique_id: ai_detection_status
      state: >
        {% if is_state('input_boolean.ai_detection_enabled', 'on') %}
          {% set kitchen_check = states('input_datetime.kitchen_last_check') %}
          {% set family_check = states('input_datetime.family_room_last_check') %}
          {% set now_ts = as_timestamp(now()) %}
          
          {% if kitchen_check != 'unknown' %}
            {% set kitchen_age = (now_ts - as_timestamp(kitchen_check)) / 60 %}
          {% else %}
            {% set kitchen_age = 999 %}
          {% endif %}
          
          {% if family_check != 'unknown' %}
            {% set family_age = (now_ts - as_timestamp(family_check)) / 60 %}
          {% else %}
            {% set family_age = 999 %}
          {% endif %}
          
          {% if kitchen_age < 30 and family_age < 45 %}
            active
          {% elif kitchen_age < 60 and family_age < 90 %}
            monitoring
          {% else %}
            checking
          {% endif %}
        {% else %}
          disabled
        {% endif %}
      icon: >
        {% if is_state('sensor.ai_detection_status', 'active') %}
          mdi:brain
        {% elif is_state('sensor.ai_detection_status', 'monitoring') %}
          mdi:brain-outline
        {% elif is_state('sensor.ai_detection_status', 'checking') %}
          mdi:brain-loading
        {% else %}
          mdi:brain-off
        {% endif %}
  
  - sensor:
      name: "Driveway Analysis"
      unique_id: driveway_analysis_sensor
      state: >
        {{ states('input_text.driveway_analysis_result') | default('empty') }}
      attributes:
        last_updated: "{{ states('input_datetime.last_walk_detection') | default('never') }}"
        monitoring_active: "{{ is_state('input_boolean.dog_walk_monitoring_enabled', 'on') }}"
        analysis_method: "video_based"
        video_ready: "{{ is_state('input_boolean.driveway_video_ready', 'on') }}"
  
  - sensor:
      name: "Walk Status"
      unique_id: walk_status_sensor
      state: >
        {% if is_state('input_boolean.walk_in_progress', 'on') %}
          in_progress
        {% else %}
          {% set today = now().strftime('%Y-%m-%d') %}
          {% set morning_walk = states('input_datetime.morning_walk_done') %}
          {% set evening_walk = states('input_datetime.evening_walk_done') %}
          {% set morning_done = morning_walk != 'unknown' and morning_walk[:10] == today %}
          {% set evening_done = evening_walk != 'unknown' and evening_walk[:10] == today %}
          
          {% if morning_done and evening_done %}
            both_complete
          {% elif morning_done %}
            morning_complete
          {% elif evening_done %}
            evening_complete
          {% else %}
            pending
          {% endif %}
        {% endif %}
      attributes:
        walk_in_progress: "{{ is_state('input_boolean.walk_in_progress', 'on') }}"
        walk_started: "{{ states('input_datetime.current_walk_started') | default('never') }}"
        walk_duration_minutes: >
          {% if is_state('input_boolean.walk_in_progress', 'on') %}
            {% set start_time = states('input_datetime.current_walk_started') %}
            {% if start_time != 'unknown' %}
              {{ ((as_timestamp(now()) - as_timestamp(start_time)) / 60) | round(0) }}
            {% else %}
              unknown
            {% endif %}
          {% else %}
            0
          {% endif %}
        morning_walk_done: "{{ states('input_datetime.morning_walk_done') | default('never') }}"
        evening_walk_done: "{{ states('input_datetime.evening_walk_done') | default('never') }}"
      icon: >
        {% if is_state('sensor.walk_status', 'in_progress') %}
          mdi:walk
        {% elif is_state('sensor.walk_status', 'both_complete') %}
          mdi:check-all
        {% elif 'complete' in states('sensor.walk_status') %}
          mdi:check
        {% else %}
          mdi:clock-outline
        {% endif %}
  

# Automations
automation:
  # Driveway Video AI Analysis
  - id: driveway_video_analysis
    alias: "Driveway Video AI Analysis"
    description: "Analyze driveway video to detect dog walking activity"
    trigger:
      - platform: state
        entity_id: input_boolean.driveway_video_ready
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.ai_detection_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
    action:
      # Choose appropriate video file and analysis prompt based on walk status
      - choose:
          # Walk in progress - analyze return video for completion
          - conditions:
              - condition: state
                entity_id: input_boolean.walk_in_progress
                state: "on"
            sequence:
              # Analyze the walk return video
              - service: ai_task.generate_data
                data:
                  task_name: "driveway_walk_return_analysis"
                  instructions: >
                    Analyze this 30-second driveway video captured during an active dog walk. A person was detected in the driveway while a walk was in progress, suggesting they may be returning from the walk.
                    Since this was triggered during an active walk, focus specifically on:
                    1. Is there a person returning to the house/driveway?
                    2. Can you detect a dog with the person (even if partially obscured, on leash, or difficult to see due to lighting/positioning)?
                    3. Does this appear to be the end of a dog walking activity?
                    The dog may be:
                    - Hard to see due to nighttime/low light conditions
                    - Blocked or shielded by the person walking
                    - Small and close to the person's legs
                    - On the opposite side of the person from the camera
                    Look carefully for:
                    - Leash in person's hand or evidence of leash management
                    - Person's walking pattern suggesting they're managing a dog
                    - Any glimpse of dog movement, even if partial
                    - Person entering property from street/sidewalk direction
                    Respond with:
                    - "ending_dog_walk" if there's evidence this is a person returning with a dog (even if dog is hard to see)
                    - "person_only" if clearly only a person with no evidence of a dog
                    - "unclear" if you cannot determine due to visibility issues
                  attachments:
                    - media_content_id: media-source://media_source/local/driveway_walk_return_capture.mp4
                      media_content_type: video/mp4
                  entity_id: ai_task.google_ai_task
                response_variable: driveway_video_response
        # No walk in progress - use normal dual-sensor analysis
        default:
          # Analyze the standard dual-sensor triggered video
          - service: ai_task.generate_data
            data:
              task_name: "driveway_video_dog_walk_detection"
              instructions: >
                Analyze this 30-second driveway video to detect dog walking activity. The video includes 15 seconds before the motion sensor triggered and 15 seconds after.
                Look for:
                1. A person walking with a dog (leash, person + dog movement together)
                2. Direction of travel - are they leaving or arriving?
                3. Dog walking behavior and person-dog interaction
                Pay attention to the sequence of events throughout the video:
                - If you see a person with a dog moving away from the camera/house or going down steps early in the video, this suggests "starting_dog_walk"
                - If you see a person with a dog moving toward the camera/house or going up steps later in the video, this suggests "ending_dog_walk"
                - Use the timestamp overlay to help determine the sequence and direction
                Respond with:
                - "starting_dog_walk" if person + dog are leaving for a walk
                - "ending_dog_walk" if person + dog are returning from a walk  
                - "person_only" if only a person is seen
                - "dog_only" if only a dog is seen
                - "empty" if no relevant activity is detected
                Focus on clear dog walking activity and direction of travel. The 15-second lookback should capture the beginning of the activity that triggered the sensor.
              attachments:
                - media_content_id: media-source://media_source/local/driveway_dogwalk_capture.mp4
                  media_content_type: video/mp4
              entity_id: ai_task.google_ai_task
            response_variable: driveway_video_response
      # Store the analysis result
      - service: input_text.set_value
        target:
          entity_id: input_text.driveway_analysis_result
        data:
          value: "{{ driveway_video_response.data | lower }}"
      # Reset video ready flag for next cycle
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.driveway_video_ready
  # Driveway Video Capture for Walk Detection
  - id: driveway_video_capture
    alias: "Driveway Video Capture"
    description: "Capture video when both person and pet motion detected in driveway within 30 seconds, OR when person detected during active walk"
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: binary_sensor.driveway_person
        to: "on"
        id: "person_motion"
      - platform: state
        entity_id: binary_sensor.driveway_pet  
        to: "on"
        id: "pet_motion"
    condition:
      # Only during hours when dog walks might happen
      - condition: time
        after: "06:00:00"
        before: "22:00:00"
      # Only analyze if camera entity is configured
      - condition: template
        value_template: >
          {{ states('input_text.driveway_camera_entity') not in ['unknown', ''] }}
    action:
      # Check if this is a person detection during an active walk
      - choose:
          # Person detected during active walk - capture immediately for walk completion analysis
          - conditions:
              - condition: trigger
                id: "person_motion"
              - condition: state
                entity_id: input_boolean.walk_in_progress
                state: "on"
            sequence:
              # Update last detection time
              - service: input_datetime.set_datetime
                target:
                  entity_id: input_datetime.last_walk_detection
                data:
                  datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
              # Set video ready flag to false while capturing
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.driveway_video_ready
              # Capture video for walk completion analysis
              - service: camera.record
                target:
                  entity_id: "{{ states('input_text.driveway_camera_entity') }}"
                data:
                  duration: 30
                  lookback: 15
                  filename: "/config/www/local/driveway_walk_return_capture.mp4"
              # Wait for recording to complete
              - delay: "00:00:32"
              # Set video ready flag to trigger analysis
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.driveway_video_ready
        # No active walk - use normal dual-sensor logic
        default:
          # Wait for both sensors to trigger within 30 seconds
          - choose:
              # If person triggered first, wait for pet
              - conditions:
                  - condition: trigger
                    id: "person_motion"
                sequence:
                  - wait_for_trigger:
                      - platform: state
                        entity_id: binary_sensor.driveway_pet
                        to: "on"
                    timeout: "00:00:30"
                    continue_on_timeout: false
              # If pet triggered first, wait for person  
              - conditions:
                  - condition: trigger
                    id: "pet_motion"
                sequence:
                  - wait_for_trigger:
                      - platform: state
                        entity_id: binary_sensor.driveway_person
                        to: "on"
                    timeout: "00:00:30"
                    continue_on_timeout: false
          # Both sensors detected - proceed with video capture
          # Update last detection time
          - service: input_datetime.set_datetime
            target:
              entity_id: input_datetime.last_walk_detection
            data:
              datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          # Set video ready flag to false while capturing
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.driveway_video_ready
          # Capture video with 15 second lookback and 30 second duration
          - service: camera.record
            target:
              entity_id: "{{ states('input_text.driveway_camera_entity') }}"
            data:
              duration: 30
              lookback: 15
              filename: "/config/www/local/driveway_dogwalk_capture.mp4"
          # Wait for recording to complete (30 seconds + small buffer)
          - delay: "00:00:32"
          # Set video ready flag to trigger analysis
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.driveway_video_ready
  # Evening dog walk reminder
  - id: evening_dog_walk_reminder
    alias: "Evening Dog Walk Reminder"
    description: "Remind to walk dog in the evening (8:30pm-10pm)"
    trigger:
      - platform: time
        at: "20:30:00"
      - platform: time
        at: "21:00:00"
      - platform: time
        at: "21:30:00"
    condition:
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.notifications_enabled
        state: "on"
      # Don't remind if walk is already in progress
      - condition: state
        entity_id: input_boolean.walk_in_progress
        state: "off"
      # Check if evening walk already done today
      - condition: template
        value_template: >
          {% set evening_walk = states('input_datetime.evening_walk_done') %}
          {% set today = now().strftime('%Y-%m-%d') %}
          {{ evening_walk == 'unknown' or evening_walk[:10] != today }}
    action:
      - event: UNotify
        event_data_template:
          message_speak: 'Time for your evening dog walk! Don''t forget the leash!'
          message_display: 'Evening Dog Walk Time 🐕'
          message: 'Time for your evening dog walk! It''s {{ now().strftime(''%H:%M'') }} - grab the leash and have a great walk! 🐕'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: evening_dog_walk
  # Mark evening walk as done when person detected with dog at driveway
  - id: evening_walk_auto_complete
    alias: "Evening Walk Auto Complete"
    description: "Automatically mark evening walk as complete when detected (3pm-10pm)"
    trigger:
      - platform: state
        entity_id: sensor.driveway_analysis
        to: "ending_dog_walk"
    condition:
      - condition: time
        after: "15:00:00"
        before: "22:00:00"
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
      # Check if evening walk not already done today
      - condition: template
        value_template: >
          {% set evening_walk = states('input_datetime.evening_walk_done') %}
          {% set today = now().strftime('%Y-%m-%d') %}
          {{ evening_walk == 'unknown' or evening_walk[:10] != today }}
    action:
      # Clear walk in progress flag
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.walk_in_progress
      # Mark evening walk as done
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.evening_walk_done
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Clear evening walk notification for Liam
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: evening_dog_walk
      # Clear walk started notification
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: walk_started
      # Send encouraging acknowledgment to Liam
      - event: UNotify
        event_data_template:
          message_speak: 'Excellent job taking the dog for an evening walk! You''re amazing!'
          message_display: 'Evening Walk Complete! 🎉'
          message: >
            Great job taking the dog for their evening walk! You''re amazing! 
            {% set start_time = states('input_datetime.current_walk_started') %}
            {% if start_time != 'unknown' %}
              {% set duration = ((as_timestamp(now()) - as_timestamp(start_time)) / 60) | round(0) %}
              Walk duration: {{ duration }} minutes.
            {% endif %} 🐕❤️
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: evening_walk_complete
      # Send completion status to parents
      - event: UNotify
        event_data_template:
          message_speak: 'no'
          message_display: 'no'
          message: >
            Evening walk completed at {{ now().strftime('%H:%M') }}.
            {% set start_time = states('input_datetime.current_walk_started') %}
            {% if start_time != 'unknown' %}
              {% set duration = ((as_timestamp(now()) - as_timestamp(start_time)) / 60) | round(0) %}
              Duration: {{ duration }} minutes.
            {% endif %}
          priority: low
          channel: General
          aiprompt: 'no'
          message_target: parents
          tag: evening_walk_status
  # Family Room AI Analysis Automation
  - id: trigger_family_room_analysis
    alias: "Trigger Family Room AI Analysis"
    description: "Analyze family room tidiness when person motion detected"
    trigger:
      # Trigger when person motion turns on (person enters family room)
      - platform: state
        entity_id: binary_sensor.family_room_person_motion
        to: "on"
      # Trigger when person motion turns off (person leaves family room)
      - platform: state
        entity_id: binary_sensor.family_room_person_motion
        to: "off" 
        for:
          minutes: 2  # Wait 2 minutes after person leaves to analyze
      # Manual trigger via force check button
      - platform: state
        entity_id: input_boolean.force_family_room_check
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.ai_detection_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.family_room_monitoring_enabled
        state: "on"
      # Only analyze if camera entity is configured
      - condition: template
        value_template: >
          {{ states('input_text.family_room_camera_entity') not in ['unknown', ''] }}
      # Check if analysis is needed (based on time since last check or force check)
      - condition: or
        conditions:
          - condition: state
            entity_id: input_boolean.force_family_room_check
            state: "on"
          - condition: template
            value_template: >
              {% set last_check = states('input_datetime.family_room_last_check') %}
              {% if last_check == 'unknown' %}
                true
              {% else %}
                {{ (as_timestamp(now()) - as_timestamp(last_check)) > 300 }}
              {% endif %}
    action:
      # Update last check time
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.family_room_last_check
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Take camera snapshots for family room analysis
      - service: camera.snapshot
        target:
          entity_id: "{{ states('input_text.family_room_camera_entity') }}"
        data:
          filename: "/config/www/local/family_room_snapshot.jpg"
      # Take additional snapshot from kitchen camera (left side view into family room)
      - service: camera.snapshot
        target:
          entity_id: "{{ states('input_text.kitchen_camera_entity') }}"
        data:
          filename: "/config/www/local/family_room_kitchen_view_snapshot.jpg"
      - service: ai_task.generate_data
        data:
          task_name: "family_room_tidiness_analysis"
          instructions: >
            Analyze these family room/living room images. Focus ONLY on practical safety and cleanliness.
            Rate tidiness 0-100. If below {{ states('input_number.family_room_cleanliness_threshold') }}, 
            respond "needs_tidying" and list issues. If above, respond "tidy".
            Analysis of the family_room_kitchen_view_snapshot.jpg should exclude anything that is the kitchen. The family room is to the top left of the image, near the couch. If you see dirty dishes on the desk area between the kitchen and the family room, call that out too, but ignore the general clutter.
            ONLY flag these issues:
            - Food/drinks left out (especially if sticky/messy)
            - Dishes with food residue  
            - Items on the floor (tripping hazard)
            - Spills that need cleaning
            IGNORE: blankets on chairs, remotes on tables, books/papers, decorative items, stuffed animals on furniture, charging cables
          attachments:
            - media_content_id: media-source://media_source/local/family_room_snapshot.jpg
              media_content_type: image/jpeg
            - media_content_id: media-source://media_source/local/family_room_kitchen_view_snapshot.jpg
              media_content_type: image/jpeg
          entity_id: ai_task.google_ai_task
        response_variable: family_room_ai_response
      # Store analysis result and tasks in variable sensor
      - service: variable.update_sensor
        data:
          value: >
            {% set response = family_room_ai_response.data | lower %}
            {% if 'needs_tidying' in response %}
              needs_tidying
            {% elif 'tidy' in response %}
              tidy  
            {% else %}
              unknown
            {% endif %}
          attributes:
            timestamp: "{{ now() }}"
            tasks: >
              {% set response = family_room_ai_response.data %}
              {% set ns = namespace(filtered=[]) %}
              {% for line in response.split('\n') %}
                {% if not ('needs_tidying' in line.lower() or 'tidy' in line.lower()) %}
                  {% set ns.filtered = ns.filtered + [line] %}
                {% endif %}
              {% endfor %}
              {{ ns.filtered | join('\n') | trim }}
          replace_attributes: true
        target:
          entity_id: sensor.family_room_tidy_status
      # Also update the legacy input_text for backwards compatibility
      - service: input_text.set_value
        target:
          entity_id: input_text.family_room_analysis_result
        data:
          value: >
            {% set response = family_room_ai_response.data | lower %}
            {% if 'needs_tidying' in response %}
              needs_tidying
            {% elif 'tidy' in response %}
              tidy  
            {% else %}
              unknown
            {% endif %}
      # Turn off force check trigger  
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.force_family_room_check
  # Family Room Tidying Notification
  - id: family_room_tidying_notification
    alias: "Family Room Tidying Notification"
    description: "Send notifications when family room needs tidying"
    trigger:
      - platform: state
        entity_id: sensor.family_room_analysis
        to: "needs_tidying"
    condition:
      - condition: state
        entity_id: input_boolean.family_room_monitoring_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.notifications_enabled
        state: "on"
      # Check cooldown period
      - condition: template
        value_template: >
          {% set last_notification = states('input_datetime.last_family_room_notification') %}
          {% if last_notification == 'unknown' %}
            true
          {% else %}
            {{ (as_timestamp(now()) - as_timestamp(last_notification)) / 60 > states('input_number.notification_cooldown') | int }}
          {% endif %}
    action:
      # Update last notification time
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_family_room_notification
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Send reminder to Liam
      - event: UNotify
        event_data_template:
          message_speak: 'Hey Liam, the family room could use some tidying when you have a chance'
          message_display: 'Family Room Needs Tidying 🛋️'
          message: 'When you get a chance, {{ state_attr(''sensor.family_room_analysis'', ''specific_tasks'') | default(''please tidy up the family room'') | lower }}.'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: family_room_tidy
  # Family room tidied acknowledgment
  - id: family_room_tidied_acknowledgment
    alias: "Family Room Tidied Acknowledgment"
    description: "Acknowledge when family room has been tidied"
    trigger:
      - platform: state
        entity_id: sensor.family_room_analysis
        from: "needs_tidying"
        to: "tidy"
    condition:
      - condition: state
        entity_id: input_boolean.notifications_enabled
        state: "on"
    action:
      # Clear the tidying notification for Liam
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: family_room_tidy
      # Send encouraging acknowledgment to Liam
      - event: UNotify
        event_data_template:
          message_speak: 'Fantastic job tidying the family room! You''re doing amazing!'
          message_display: 'Family Room Tidy! ✨'
          message: 'Thanks for tidying up the family room! It looks great - you''re amazing! 🌟'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: family_room_tidied
      # Send status update to parents
      - event: UNotify
        event_data_template:
          message_speak: 'no'
          message_display: 'no'
          message: 'Family room tidied at {{ now().strftime(''%H:%M'') }} - excellent work!'
          priority: low
          channel: General
          aiprompt: 'no'
          message_target: parents
          tag: family_room_status
  # Family room tidy notification
  - id: family_room_tidy_notification
    alias: "Family Room Tidy Notification"
    description: "Send notifications when family room is analyzed as tidy"
    trigger:
      - platform: state
        entity_id: sensor.family_room_analysis
        to: "tidy"
    condition:
      - condition: state
        entity_id: input_boolean.family_room_monitoring_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.notifications_enabled
        state: "on"
      # Only notify if this is a fresh analysis, not a transition
      - condition: template
        value_template: >
          {% set from_state = trigger.from_state.state if trigger.from_state else 'unknown' %}
          {{ from_state in ['unknown', 'unavailable', none] }}
    action:
      - service: notify.parents
        data:
          title: "Family Room Looking Good! ✨"
          message: "The family room is nice and tidy. Great job keeping it organized!"
          data:
            tag: family_room_good
  # Kitchen AI Analysis Automation
  - id: trigger_kitchen_analysis
    alias: "Trigger Kitchen AI Analysis"
    description: "Analyze kitchen cleanliness when person motion detected"
    trigger:
      # Trigger when person motion turns on (person enters kitchen)
      - platform: state
        entity_id: binary_sensor.kitchen_person_motion
        to: "on"
      # Trigger when person motion turns off (person leaves kitchen)  
      - platform: state
        entity_id: binary_sensor.kitchen_person_motion
        to: "off"
        for:
          minutes: 2  # Wait 2 minutes after person leaves to analyze
      # Manual trigger via force check button
      - platform: state
        entity_id: input_boolean.force_kitchen_check
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.ai_detection_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.kitchen_monitoring_enabled
        state: "on"
      # Only analyze if camera entity is configured
      - condition: template
        value_template: >
          {{ states('input_text.kitchen_camera_entity') not in ['unknown', ''] }}
      # Check if analysis is needed (based on time since last check or force check)
      - condition: or
        conditions:
          - condition: state
            entity_id: input_boolean.force_kitchen_check
            state: "on"
          - condition: template
            value_template: >
              {% set last_check = states('input_datetime.kitchen_last_check') %}
              {% if last_check == 'unknown' %}
                true
              {% else %}
                {{ (as_timestamp(now()) - as_timestamp(last_check)) > 300 }}
              {% endif %}
    action:
      # Update last check time
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.kitchen_last_check
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Take camera snapshots for kitchen analysis
      - service: camera.snapshot
        target:
          entity_id: "{{ states('input_text.kitchen_camera_entity') }}"
        data:
          filename: "/config/www/local/kitchen_snapshot.jpg"
      # Fire tablet camera temporarily disabled due to Fully Kiosk integration issues
      # TODO: Re-enable when fire tablet camera is stable
      - service: ai_task.generate_data
        data:
          task_name: "kitchen_cleanliness_analysis"
          instructions: >
            Analyze this kitchen image for food safety and basic cleanliness. Focus on:
            1. Food items left out on counters (especially perishable items)
            2. Dirty dishes in sink or on counters
            3. Spills or messes that could attract pests
            4. General tidiness that affects food preparation safety
            Categorize as:
            - "clean" if kitchen is suitable for food preparation
            - "needs_attention" if there are minor issues (few dishes, small spills)
            - "needs_cleaning" if there are food safety concerns (food left out, many dirty dishes, significant mess)
            Be family-friendly and focus on health/safety rather than perfection.
            Respond with just the category, then provide 2-3 specific helpful suggestions.
          attachments:
            - media_content_id: media-source://media_source/local/kitchen_snapshot.jpg
              media_content_type: image/jpeg
          entity_id: ai_task.google_ai_task
        response_variable: kitchen_ai_response
      # Store analysis result and tasks in variable sensor
      - service: variable.update_sensor
        data:
          value: >
            {% if 'needs_cleaning' in kitchen_ai_response.data | lower %}
              needs_cleaning
            {% elif 'needs_attention' in kitchen_ai_response.data | lower %}
              needs_attention
            {% elif 'clean' in kitchen_ai_response.data | lower %}
              clean
            {% else %}
              unknown
            {% endif %}
          attributes:
            timestamp: "{{ now() }}"
            tasks: >
              {% set response = kitchen_ai_response.data %}
              {% set ns = namespace(filtered=[]) %}
              {% for line in response.split('\n') %}
                {% if not ('needs_cleaning' in line.lower() or 'needs_attention' in line.lower() or 'clean' in line.lower()) %}
                  {% set ns.filtered = ns.filtered + [line] %}
                {% endif %}
              {% endfor %}
              {{ ns.filtered | join('\n') | trim }}
          replace_attributes: true
        target:
          entity_id: sensor.kitchen_clean_status
      # Also update the legacy input_text for backwards compatibility
      - service: input_text.set_value
        target:
          entity_id: input_text.kitchen_analysis_result
        data:
          value: >
            {% if 'needs_cleaning' in kitchen_ai_response.data | lower %}
              needs_cleaning
            {% elif 'needs_attention' in kitchen_ai_response.data | lower %}
              needs_attention
            {% elif 'clean' in kitchen_ai_response.data | lower %}
              clean
            {% else %}
              unknown
            {% endif %}
      # Turn off force check trigger  
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.force_kitchen_check
  # Kitchen Cleaned Acknowledgment
  - id: kitchen_cleaned_acknowledgment
    alias: "Kitchen Cleaned Acknowledgment"
    description: "Acknowledge when kitchen has been cleaned"
    trigger:
      - platform: state
        entity_id: sensor.kitchen_analysis
        from: "needs_cleaning"
        to: "clean"
    condition:
      - condition: state
        entity_id: input_boolean.notifications_enabled
        state: "on"
    action:
      # Clear the cleanup notification for Liam
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: kitchen_cleanup
      # Send encouraging acknowledgment to Liam
      - event: UNotify
        event_data_template:
          message_speak: 'Awesome job cleaning the kitchen! You''re doing great!'
          message_display: 'Kitchen Clean! ✨'
          message: 'Great job cleaning up the kitchen! It looks fantastic - you''re awesome! 🌟'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: kitchen_cleaned
      # Send status update to parents
      - event: UNotify
        event_data_template:
          message_speak: 'no'
          message_display: 'no'
          message: 'Kitchen cleaned at {{ now().strftime(''%H:%M'') }} - great work!'
          priority: low
          channel: General
          aiprompt: 'no'
          message_target: parents
          tag: kitchen_status
  # Kitchen Cleanup Notification
  - id: kitchen_cleanup_notification
    alias: "Kitchen Cleanup Notification"
    description: "Send notifications when kitchen needs cleaning"
    trigger:
      - platform: state
        entity_id: sensor.kitchen_analysis
        to: "needs_cleaning"
    condition:
      - condition: state
        entity_id: input_boolean.kitchen_monitoring_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.notifications_enabled
        state: "on"
      # Check 30-minute cooldown period
      - condition: template
        value_template: >
          {% set last_notification = states('input_datetime.last_kitchen_notification') %}
          {% if last_notification == 'unknown' %}
            true
          {% else %}
            {{ (as_timestamp(now()) - as_timestamp(last_notification)) / 60 > states('input_number.notification_cooldown') | int }}
          {% endif %}
    action:
      # Update last notification time
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_kitchen_notification
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Send reminder based on notification target setting
      - event: UNotify
        event_data_template:
          message_speak: >
            {% if states('input_text.notification_target') == 'liam' %}
            Hey Liam, the kitchen needs some attention when you have a moment
            {% else %}
            no
            {% endif %}
          message_display: >
            {% if states('input_text.notification_target') == 'liam' %}
            Kitchen Needs Cleaning 🍽️
            {% else %}
            no
            {% endif %}
          message: 'Hey, when you''re done in the kitchen, {{ state_attr(''sensor.kitchen_analysis'', ''specific_tasks'') | default(''please tidy up a bit'') | lower }}.'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: "{{ states('input_text.notification_target') }}"
          tag: kitchen_cleanup
  # Morning dog walk reminder
  - id: morning_dog_walk_reminder
    alias: "Morning Dog Walk Reminder"
    description: "Remind to walk dog in the morning/afternoon (12pm-3pm)"
    trigger:
      - platform: time
        at: "12:00:00"
      - platform: time
        at: "12:30:00"
      - platform: time
        at: "13:00:00"
    condition:
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.notifications_enabled
        state: "on"
      # Don't remind if walk is already in progress
      - condition: state
        entity_id: input_boolean.walk_in_progress
        state: "off"
      # Check if morning walk already done today
      - condition: template
        value_template: >
          {% set morning_walk = states('input_datetime.morning_walk_done') %}
          {% set today = now().strftime('%Y-%m-%d') %}
          {{ morning_walk == 'unknown' or morning_walk[:10] != today }}
    action:
      - event: UNotify
        event_data_template:
          message_speak: 'Time for your morning dog walk! Don''t forget the leash!'
          message_display: 'Morning Dog Walk Time 🐕'
          message: 'Time for your morning dog walk! It''s {{ now().strftime(''%H:%M'') }} - grab the leash and have a great walk! 🐕'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: morning_dog_walk
  # Mark morning walk as done when person detected with dog at driveway
  - id: morning_walk_auto_complete
    alias: "Morning Walk Auto Complete"
    description: "Automatically mark morning walk as complete when detected (6am-3pm)"
    trigger:
      - platform: state
        entity_id: sensor.driveway_analysis
        to: "ending_dog_walk"
    condition:
      - condition: time
        after: "06:00:00"
        before: "15:00:00"
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
      # Check if morning walk not already done today
      - condition: template
        value_template: >
          {% set morning_walk = states('input_datetime.morning_walk_done') %}
          {% set today = now().strftime('%Y-%m-%d') %}
          {{ morning_walk == 'unknown' or morning_walk[:10] != today }}
    action:
      # Clear walk in progress flag
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.walk_in_progress
      # Mark morning walk as done
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.morning_walk_done
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Clear morning walk notification for Liam
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: morning_dog_walk
      # Clear walk started notification
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: walk_started
      # Send encouraging acknowledgment to Liam
      - event: UNotify
        event_data_template:
          message_speak: 'Awesome job taking the dog for a morning walk! You''re the best!'
          message_display: 'Morning Walk Complete! 🎉'
          message: >
            Great job taking the dog for their morning walk! You''re awesome! 
            {% set start_time = states('input_datetime.current_walk_started') %}
            {% if start_time != 'unknown' %}
              {% set duration = ((as_timestamp(now()) - as_timestamp(start_time)) / 60) | round(0) %}
              Walk duration: {{ duration }} minutes.
            {% endif %} 🐕❤️
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: morning_walk_complete
      # Send completion status to parents
      - event: UNotify
        event_data_template:
          message_speak: 'no'
          message_display: 'no'
          message: >
            Morning walk completed at {{ now().strftime('%H:%M') }}.
            {% set start_time = states('input_datetime.current_walk_started') %}
            {% if start_time != 'unknown' %}
              {% set duration = ((as_timestamp(now()) - as_timestamp(start_time)) / 60) | round(0) %}
              Duration: {{ duration }} minutes.
            {% endif %}
          priority: low
          channel: General
          aiprompt: 'no'
          message_target: parents
          tag: morning_walk_status
  # Handle unclear walk return analysis
  - id: unclear_walk_return_notification
    alias: "Unclear Walk Return Notification"
    description: "Notify user when walk return analysis is unclear during active walk"
    trigger:
      - platform: state
        entity_id: sensor.driveway_analysis
        to: "unclear"
    condition:
      # Only trigger if a walk is in progress
      - condition: state
        entity_id: input_boolean.walk_in_progress
        state: "on"
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
    action:
      # Send notification asking for manual confirmation (to parents for oversight)
      - event: UNotify
        event_data_template:
          message_speak: 'no'
          message_display: 'no'
          message: 'Someone returned to the driveway during the walk, but I couldn''t clearly see if the dog was with them due to lighting or positioning. Did the walk just finish?'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: parents
          tag: unclear_walk_return
          actions:
            - action: "confirm_walk_complete"
              title: "Yes, Walk Complete ✅"
            - action: "walk_still_ongoing"
              title: "No, Still Walking 🚶‍♂️"
  # Handle user response to unclear walk return
  - id: handle_unclear_walk_response
    alias: "Handle Unclear Walk Response"
    description: "Process user's response to unclear walk return notification"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "confirm_walk_complete"
        id: "walk_complete"
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "walk_still_ongoing"
        id: "still_walking"
    condition:
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
    action:
      # Clear the unclear walk notification first
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: parents
          tag: unclear_walk_return
      - choose:
          # User confirmed walk is complete
          - conditions:
              - condition: trigger
                id: "walk_complete"
            sequence:
              # Clear walk in progress flag
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.walk_in_progress
              # Determine time of day and mark appropriate walk complete
              - choose:
                  # Morning time (6am-3pm)
                  - conditions:
                      - condition: time
                        after: "06:00:00"
                        before: "15:00:00"
                    sequence:
                      # Check if morning walk not already done
                      - condition: template
                        value_template: >
                          {% set morning_walk = states('input_datetime.morning_walk_done') %}
                          {% set today = now().strftime('%Y-%m-%d') %}
                          {{ morning_walk == 'unknown' or morning_walk[:10] != today }}
                      # Mark morning walk complete
                      - action: input_datetime.set_datetime
                        target:
                          entity_id: input_datetime.morning_walk_done
                        data:
                          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
                      # Clear morning walk notifications for Liam
                      - event: UNotify
                        event_data_template:
                          message: "clear_notification"
                          message_target: liam
                          tag: morning_dog_walk
                      # Send encouraging acknowledgment to Liam
                      - event: UNotify
                        event_data_template:
                          message_speak: 'Awesome job with the morning walk! You''re the best!'
                          message_display: 'Morning Walk Complete! 🐕❤️'
                          message: 'Thanks for walking the dog! Morning walk marked as complete - you''re amazing!'
                          priority: normal
                          channel: General
                          aiprompt: 'no'
                          message_target: liam
                          tag: walk_acknowledgment
                  # Evening time (3pm-10pm)
                  - conditions:
                      - condition: time
                        after: "15:00:00" 
                        before: "22:00:00"
                    sequence:
                      # Check if evening walk not already done
                      - condition: template
                        value_template: >
                          {% set evening_walk = states('input_datetime.evening_walk_done') %}
                          {% set today = now().strftime('%Y-%m-%d') %}
                          {{ evening_walk == 'unknown' or evening_walk[:10] != today }}
                      # Mark evening walk complete
                      - action: input_datetime.set_datetime
                        target:
                          entity_id: input_datetime.evening_walk_done
                        data:
                          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
                      # Clear evening walk notifications for Liam
                      - event: UNotify
                        event_data_template:
                          message: "clear_notification"
                          message_target: liam
                          tag: evening_dog_walk
                      # Send encouraging acknowledgment to Liam
                      - event: UNotify
                        event_data_template:
                          message_speak: 'Excellent job with the evening walk! You''re amazing!'
                          message_display: 'Evening Walk Complete! 🐕❤️'
                          message: 'Thanks for walking the dog! Evening walk marked as complete - you''re amazing!'
                          priority: normal
                          channel: General
                          aiprompt: 'no'
                          message_target: liam
                          tag: walk_acknowledgment
          # User said walk is still ongoing
          - conditions:
              - condition: trigger
                id: "still_walking"
            sequence:
              # Send acknowledgment that walk continues (to parents for status)
              - event: UNotify
                event_data_template:
                  message_speak: 'no'
                  message_display: 'no'
                  message: 'Got it! Walk marked as still in progress. I''ll keep monitoring for the return.'
                  priority: low
                  channel: General
                  aiprompt: 'no'
                  message_target: parents
                  tag: walk_acknowledgment
  # Walk Started Detection
  - id: walk_started_detection
    alias: "Walk Started Detection"
    description: "Detect when someone starts a dog walk and clear reminders"
    trigger:
      - platform: state
        entity_id: sensor.driveway_analysis
        to: "starting_dog_walk"
    condition:
      - condition: state
        entity_id: input_boolean.dog_walk_monitoring_enabled
        state: "on"
      # Only trigger if not already on a walk
      - condition: state
        entity_id: input_boolean.walk_in_progress
        state: "off"
    action:
      # Set walk in progress flag
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.walk_in_progress
      # Record walk start time
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.current_walk_started
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Clear any active walk reminder notifications for Liam
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: morning_dog_walk
      - event: UNotify
        event_data_template:
          message: "clear_notification"
          message_target: liam
          tag: evening_dog_walk
      # Send encouraging walk started notification to Liam
      - event: UNotify
        event_data_template:
          message_speak: 'Great! You''re taking the dog for a walk - have a wonderful time!'
          message_display: 'Walk Started! 🚶‍♂️🐕'
          message: 'Awesome! You''re taking the dog for a walk - have a great time together! 🐕❤️'
          priority: normal
          channel: General
          aiprompt: 'no'
          message_target: liam
          tag: walk_started
      # Send status update to parents
      - event: UNotify
        event_data_template:
          message_speak: 'no'
          message_display: 'no'
          message: 'Dog walk started at {{ now().strftime(''%H:%M'') }}.'
          priority: low
          channel: General
          aiprompt: 'no'
          message_target: parents
          tag: walk_started_status

# Input Boolean Helpers
input_boolean:
  # Input Boolean Helper Entities
  ai_detection_enabled:
    name: "AI Detection System Enabled"
    icon: mdi:brain

  notifications_enabled:
    name: "Notifications Enabled"
    icon: mdi:bell

  kitchen_monitoring_enabled:
    name: "Kitchen Monitoring Enabled" 
    icon: mdi:chef-hat

  family_room_monitoring_enabled:
    name: "Family Room Monitoring Enabled"
    icon: mdi:sofa

  dog_walk_monitoring_enabled:
    name: "Dog Walk Monitoring Enabled"
    icon: mdi:dog

  dog_walk_reminders_enabled:
    name: "Dog Walk Reminders Enabled"
    icon: mdi:dog

  walk_in_progress:
    name: "Walk In Progress"
    icon: mdi:walk

  force_kitchen_check:
    name: "Force Kitchen Check"
    icon: mdi:camera-iris

  force_family_room_check:
    name: "Force Family Room Check" 
    icon: mdi:camera-iris

  driveway_video_ready:
    name: "Driveway Video Ready"
    icon: mdi:video-check


# Input DateTime Helpers
input_datetime:
  # Input DateTime Helper Entities
  kitchen_last_check:
    name: "Kitchen Last Check"
    has_date: true
    has_time: true
    icon: mdi:clock-check
    
  last_kitchen_notification:
    name: "Last Kitchen Notification"
    has_date: true
    has_time: true
    icon: mdi:bell-check
    
  family_room_last_check:
    name: "Family Room Last Check"
    has_date: true
    has_time: true
    icon: mdi:clock-check
    
  last_family_room_notification:
    name: "Last Family Room Notification"
    has_date: true
    has_time: true
    icon: mdi:bell-check
    
  morning_walk_done:
    name: "Morning Walk Done"
    has_date: true
    has_time: true
    icon: mdi:dog
    
  evening_walk_done:
    name: "Evening Walk Done"
    has_date: true
    has_time: true
    icon: mdi:dog
    
  current_walk_started:
    name: "Current Walk Started"
    has_date: true
    has_time: true
    icon: mdi:clock-start
    
  last_walk_detection:
    name: "Last Walk Detection"
    has_date: true
    has_time: true
    icon: mdi:camera-timer
    
  last_dog_notification:
    name: "Last Dog Notification"
    has_date: true
    has_time: true
    icon: mdi:bell-check


# Input Number Helpers
input_number:
  # Input Number Helper Entities
  kitchen_cleanliness_threshold:
    name: "Kitchen Cleanliness Threshold"
    min: 1
    max: 100
    step: 1
    initial: 70
    unit_of_measurement: "%"
    icon: mdi:gauge
    
  family_room_cleanliness_threshold:
    name: "Family Room Cleanliness Threshold"
    min: 1
    max: 100
    step: 1
    initial: 65
    unit_of_measurement: "%"
    icon: mdi:gauge
    
  notification_cooldown:
    name: "Notification Cooldown"
    min: 10
    max: 240
    step: 5
    initial: 30
    unit_of_measurement: "minutes"
    icon: mdi:timer
    
  dog_walk_max_hours:
    name: "Dog Walk Max Hours"
    min: 4
    max: 16
    step: 1
    initial: 8
    unit_of_measurement: "hours"
    icon: mdi:clock


# Input Text Helpers
input_text:
  # System Configuration
  notification_target:
    name: "Notification Target"
    initial: "liam"
    options:
      - liam
      - parents
    max: 20
    icon: mdi:account-circle

  # Entity Configuration  
  kitchen_camera_entity:
    name: "Kitchen Camera Entity"
    initial: "camera.kitchen"
    max: 100
    icon: mdi:camera

  family_room_camera_entity:
    name: "Family Room Camera Entity"
    initial: "camera.family_room"
    max: 100
    icon: mdi:camera

  driveway_camera_entity:
    name: "Driveway Camera Entity"
    initial: "camera.driveway"
    max: 100
    icon: mdi:camera

  ai_task_entity:
    name: "AI Tasks Entity"
    initial: "ai_task.google_ai_task"
    max: 100
    icon: mdi:robot

  kitchen_motion_sensor_entity:
    name: "Kitchen Person Motion Sensor Entity"
    initial: "binary_sensor.kitchen_person_motion"
    max: 100
    icon: mdi:motion-sensor

  family_room_motion_sensor_entity:
    name: "Family Room Person Motion Sensor Entity"  
    initial: "binary_sensor.family_room_person_motion"
    max: 100
    icon: mdi:motion-sensor

  # Legacy Analysis Storage (fallback for variable sensors)
  driveway_analysis_result:
    name: "Driveway Analysis Result" 
    initial: "empty"
    max: 50
    icon: mdi:car


